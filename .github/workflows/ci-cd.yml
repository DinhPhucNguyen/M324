name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  install-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Frontend Setup und Cache
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # Backend Setup und Cache
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Docker Setup
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true

      # Frontend Build und Install
      - name: Frontend Setup
        working-directory: ./frontend
        run: |
          npm ci
          npm install eslint eslint-config-prettier prettier stylelint stylelint-config-standard jest --save-dev

      # Backend Build
      - name: Backend Build
        working-directory: ./backend
        run: mvn clean package -DskipTests

      # Cache Build Artifacts
      - name: Cache Build Artifacts
        uses: actions/cache@v2
        with:
          path: |
            ./frontend/node_modules
            ./backend/target
          key: ${{ runner.os }}-build-${{ github.sha }}

  test-and-lint:
    needs: install-and-build
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: chatapp
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Restore cached dependencies
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: |
            ./frontend/node_modules
            ./backend/target
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Parallel Test und Lint Ausf√ºhrung
      - name: Run All Tests and Linting
        run: |
          # Frontend Tests & Linting
          cd frontend
          npm run lint & # Run in background
          npm run lint:css & # Run in background
          echo "Skipping tests with --passWithNoTests flag" &

          # Backend Tests & Linting
          cd ../backend
          mvn checkstyle:check & # Run in background
          mvn test -DexcludedGroups="integration" & # Run in background
          mvn verify -Pintegration-test & # Run in background

          # SQL Linting
          pip install sqlfluff &
          
          # Wait for all background jobs
          wait

  jira-integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Restore Docker cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Deploy
        run: |
          docker-compose build
          docker-compose push
          docker-compose up -d
