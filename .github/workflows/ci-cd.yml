name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  jira-integration:
    name: Jira Integration
    runs-on: ubuntu-latest
    steps:
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm packages
        working-directory: ./frontend
        run: |
          npm install
          npm install eslint eslint-config-prettier prettier stylelint stylelint-config-standard --save-dev
          npm install jest --save-dev

      - name: Install required system packages
        run: |
          sudo apt-get update

  build:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: ./backend
        run: mvn clean package -DskipTests

  linting:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Backend Linting (Java)
        run: mvn -f ./backend/pom.xml checkstyle:check

      - name: Frontend Linting (JavaScript/CSS)
        working-directory: ./frontend
        run: |
          npm run lint || true
          npm run lint:css || true

      - name: SQL Linting
        run: |
          pip install sqlfluff
          find ./backend/src/main/resources -name "*.sql" -type f -exec sqlfluff lint {} \;

  unittest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Backend Unit Tests
        working-directory: ./backend
        run: mvn test -DexcludedGroups="integration"

      - name: Run Frontend Unit Tests
        working-directory: ./frontend
        run: npm run test -- --passWithNoTests

  integrationtest:
    runs-on: ubuntu-latest
    needs: build
    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: chatapp
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Backend Integration Tests
        working-directory: ./backend
        run: mvn verify -Pintegration-test || true

      - name: Validate Frontend
        working-directory: ./frontend
        run: echo "Frontend validation completed"

  deploy:
    runs-on: ubuntu-latest
    needs: [linting, unittest, integrationtest]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
        
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install Loki Docker Plugin
        run: |
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: docker-compose build && docker-compose push

      - name: Deploy with Docker Compose
        run: docker-compose up -d
